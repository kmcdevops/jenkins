pipeline {
    agent any

    environment {
        DOCKER_IMAGE   = 'java-sample-app:1.0'
        CONTAINER_NAME = 'java-sample-container'
        APP_PORT       = '5000'
        HOST_PORT      = '9090'
        AWS_ACCOUNT_ID = '<your-aws-account-id>'
        AWS_REGION     = 'ap-south-1'
        ECR_REPO       = 'java-sample-repo'
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'üì• Checking out code...'
                checkout scm
            }
        }

        stage('Build & Test') {
            steps {
                dir('javaapp-pipeline') {
                    echo 'üî® Building & testing...'
                    sh 'mvn clean package'
                }
            }
        }

        stage('Code Scan (SonarQube simulation)') {
            steps {
                echo 'üîç Running static code analysis...'
                // If sonar-scanner CLI installed
                sh 'echo "Simulating SonarQube scan..."'
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('javaapp-pipeline') {
                    echo "üê≥ Building Docker image..."
                    sh "docker build -t ${DOCKER_IMAGE} ."
                }
            }
        }

        stage('Scan Docker Image (Trivy)') {
            steps {
                echo 'üîé Scanning Docker image with Trivy...'
                sh "trivy image --severity HIGH,CRITICAL ${DOCKER_IMAGE} || true"
            }
        }

        stage('Push to ECR') {
            steps {
                echo 'üì¶ Pushing image to AWS ECR...'
                sh """
                  aws ecr get-login-password --region ${AWS_REGION} \
                  | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                  
                  docker tag ${DOCKER_IMAGE} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:latest
                  docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}:latest
                """
            }
        }

        stage('Deploy to Docker') {
            steps {
                echo "üöÄ Deploying container locally..."
                sh "docker stop ${CONTAINER_NAME} || true"
                sh "docker rm ${CONTAINER_NAME} || true"
                sh "docker run -d --name ${CONTAINER_NAME} -p ${HOST_PORT}:${APP_PORT} ${DOCKER_IMAGE}"
            }
        }
    }

    post {
        success { echo '‚úÖ Pipeline completed successfully!' }
        failure { echo '‚ùå Pipeline failed. Please check logs.' }
    }
}
